name: Build and Release executables

on:
  push:
    tags:
      - "v*" # Trigger on tags like v1.0.0, v1.2.3, etc.

env:
  AUTHOR: "Adriel Chandra"
  COMPANY: "Kaiei Tokiyasu"
  DESCRIPTION: "Menu-driven command-line tool for HR data processing and reporting"
  PRODUCT_NAME: "Chibi HR"
  INTERNAL_NAME: "chibihr"
  ORIGINAL_FILENAME: "chibi-HR"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3

      # Extract version parts from the tag and set env vars for the job
      - name: Extract version from tag (linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          echo "Tag: $GITHUB_REF"
          TAG=${GITHUB_REF##refs/tags/}
          VERSION=${TAG#v}  # strip leading 'v'
          IFS='.' read -r MAJOR MINOR PATCH BUILD <<< "$VERSION"
          echo "VERSION_MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "VERSION_MINOR=$MINOR" >> $GITHUB_ENV
          echo "VERSION_PATCH=$PATCH" >> $GITHUB_ENV
          echo "VERSION_BUILD=${BUILD:-0}" >> $GITHUB_ENV

      - name: Extract version from tag (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Tag: $env:GITHUB_REF"
          $tag = $env:GITHUB_REF -replace '^refs/tags/', ''
          $version = $tag -replace '^v', ''
          $parts = $version.Split('.')
          $MAJOR = $parts[0]
          $MINOR = if ($parts.Length -gt 1) { $parts[1] } else { '0' }
          $PATCH = if ($parts.Length -gt 2) { $parts[2] } else { '0' }
          $BUILD = if ($parts.Length -gt 3) { $parts[3] } else { '0' }
          echo "VERSION_MAJOR=$MAJOR" >> $env:GITHUB_ENV
          echo "VERSION_MINOR=$MINOR" >> $env:GITHUB_ENV
          echo "VERSION_PATCH=$PATCH" >> $env:GITHUB_ENV
          echo "VERSION_BUILD=$BUILD" >> $env:GITHUB_ENV

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - run: python -m pip install --upgrade pip
      - run: pip install -r requirements.txt

      - name: Generate version info for Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "Generating version.txt"
          echo "VSVersionInfo(" > version.txt
          echo "  ffi=FixedFileInfo(" >> version.txt
          echo "    filevers=(${{ env.VERSION_MAJOR }}, ${{ env.VERSION_MINOR }}, ${{ env.VERSION_PATCH }}, ${{ env.VERSION_BUILD }})," >> version.txt
          echo "    prodvers=(${{ env.VERSION_MAJOR }}, ${{ env.VERSION_MINOR }}, ${{ env.VERSION_PATCH }}, ${{ env.VERSION_BUILD }})," >> version.txt
          echo "    mask=0x3f," >> version.txt
          echo "    flags=0x0," >> version.txt
          echo "    OS=0x4," >> version.txt
          echo "    fileType=0x1," >> version.txt
          echo "    subtype=0x0," >> version.txt
          echo "    date=(0, 0)" >> version.txt
          echo "  )," >> version.txt
          echo "  kids=[" >> version.txt
          echo "    StringFileInfo([" >> version.txt
          echo "      StringTable('040904B0', [" >> version.txt
          echo "        StringStruct('CompanyName', '${{ env.COMPANY }}')," >> version.txt
          echo "        StringStruct('FileDescription', '${{ env.DESCRIPTION }}')," >> version.txt
          echo "        StringStruct('FileVersion', '${{ env.VERSION_MAJOR }}.${{ env.VERSION_MINOR }}.${{ env.VERSION_PATCH }}.${{ env.VERSION_BUILD }}')," >> version.txt
          echo "        StringStruct('InternalName', '${{ env.INTERNAL_NAME }}')," >> version.txt
          echo "        StringStruct('LegalCopyright', '${{ env.COMPANY }}')," >> version.txt
          echo "        StringStruct('OriginalFilename', '${{ env.ORIGINAL_FILENAME }}.exe')," >> version.txt
          echo "        StringStruct('ProductName', '${{ env.PRODUCT_NAME }}')," >> version.txt
          echo "        StringStruct('ProductVersion', '${{ env.VERSION_MAJOR }}.${{ env.VERSION_MINOR }}.${{ env.VERSION_PATCH }}.${{ env.VERSION_BUILD }}')," >> version.txt
          echo "        StringStruct('Comments', 'Author: ${{ env.AUTHOR }}')" >> version.txt
          echo "      ])" >> version.txt
          echo "    ])" >> version.txt
          echo "  ]," >> version.txt
          echo "  VarFileInfo([VarStruct('Translation', [1033, 1200])])" >> version.txt
          echo ")" >> version.txt

      - name: Build Windows executable
        if: matrix.os == 'windows-latest'
        run: pyinstaller --onefile --version-file=version.txt --name chibi-HR main.py

      - name: Inject version info for Linux
        if: matrix.os == 'ubuntu-latest'
        run: echo "__version__ = '${{ env.VERSION_MAJOR }}.${{ env.VERSION_MINOR }}.${{ env.VERSION_PATCH }}.${{ env.VERSION_BUILD }}'" > version.py

      - name: Build Linux executable
        if: matrix.os == 'ubuntu-latest'
        run: pyinstaller --onefile --name chibi-HR main.py

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: chibihr-${{ matrix.os }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: chibihr-windows-latest
          path: dist/windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: chibihr-ubuntu-latest
          path: dist/linux

      - name: List downloaded files
        run: |
          ls -la dist/windows
          ls -la dist/linux

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            dist/windows/chibi-HR.exe
            dist/linux/chibi-HR
