name: Build and Release executables

on:
  push:
    tags:
      - "v*" # Trigger on tags like v1.0.0, v1.2.3, etc.

env:
  AUTHOR: "Adriel Chandra"
  COMPANY: "Kaiei Tokiyasu"
  DESCRIPTION: "Menu-driven command-line tool for HR data processing and reporting"
  PRODUCT_NAME: "Chibi HR"
  INTERNAL_NAME: "chibihr"
  ORIGINAL_FILENAME: "chibi-HR"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    env:
      # Extract version numbers from the tag like v1.2.3 or v1.2.3.4
      VERSION_MAJOR: ${{ github.ref_name && github.ref_name.split('.')[0] | replace('v', '') }}
      VERSION_MINOR: ${{ github.ref_name && github.ref_name.split('.')[1] }}
      VERSION_PATCH: ${{ github.ref_name && github.ref_name.split('.')[2] }}
      VERSION_BUILD: ${{ github.ref_name && github.ref_name.split('.')[3] || '0' }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - run: python -m pip install --upgrade pip
      - run: pip install -r requirements.txt

      - name: Generate version info for Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "Generating version.txt"
          echo "VSVersionInfo(" > version.txt
          echo "  ffi=FixedFileInfo(" >> version.txt
          echo "    filevers=(${VERSION_MAJOR}, ${VERSION_MINOR}, ${VERSION_PATCH}, ${VERSION_BUILD})," >> version.txt
          echo "    prodvers=(${VERSION_MAJOR}, ${VERSION_MINOR}, ${VERSION_PATCH}, ${VERSION_BUILD})," >> version.txt
          echo "    mask=0x3f," >> version.txt
          echo "    flags=0x0," >> version.txt
          echo "    OS=0x4," >> version.txt
          echo "    fileType=0x1," >> version.txt
          echo "    subtype=0x0," >> version.txt
          echo "    date=(0, 0)" >> version.txt
          echo "  )," >> version.txt
          echo "  kids=[" >> version.txt
          echo "    StringFileInfo([" >> version.txt
          echo "      StringTable('040904B0', [" >> version.txt
          echo "        StringStruct('CompanyName', '${COMPANY}')," >> version.txt
          echo "        StringStruct('FileDescription', '${DESCRIPTION}')," >> version.txt
          echo "        StringStruct('FileVersion', '${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${VERSION_BUILD}')," >> version.txt
          echo "        StringStruct('InternalName', '${INTERNAL_NAME}')," >> version.txt
          echo "        StringStruct('LegalCopyright', '${COMPANY}')," >> version.txt
          echo "        StringStruct('OriginalFilename', '${ORIGINAL_FILENAME}.exe')," >> version.txt
          echo "        StringStruct('ProductName', '${PRODUCT_NAME}')," >> version.txt
          echo "        StringStruct('ProductVersion', '${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${VERSION_BUILD}')," >> version.txt
          echo "        StringStruct('Comments', 'Author: ${AUTHOR}')" >> version.txt
          echo "      ])" >> version.txt
          echo "    ])" >> version.txt
          echo "  ]," >> version.txt
          echo "  VarFileInfo([VarStruct('Translation', [1033, 1200])])" >> version.txt
          echo ")" >> version.txt

      - name: Build Windows executable
        if: matrix.os == 'windows-latest'
        run: pyinstaller --onefile --version-file=version.txt --name chibi-HR main.py

      - name: Inject version info for Linux
        if: matrix.os == 'ubuntu-latest'
        run: echo "__version__ = '${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${VERSION_BUILD}'" > version.py

      - name: Build Linux executable
        if: matrix.os == 'ubuntu-latest'
        run: pyinstaller --onefile --name chibi-HR main.py

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            dist/chibi-HR.exe
            dist/chibi-HR
